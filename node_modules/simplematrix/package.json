{
  "name": "simplematrix",
  "description": "Simple matrix and vector operations.",
  "keywords": [
    "matrix",
    "vector",
    "math"
  ],
  "version": "0.2.1",
  "author": {
    "name": "Peter Brandt",
    "email": "peter.m.brandt@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pbrandt1/simplematrix.git"
  },
  "bugs": {
    "url": "https://github.com/pbrandt1/simplematrix/issues"
  },
  "engines": [
    "node >= 0.8.0"
  ],
  "main": "index.js",
  "dependencies": {
    "underscore": "*"
  },
  "devDependencies": {
    "grunt": "latest",
    "grunt-contrib-watch": "latest",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-mocha": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-release": "~0.5.1",
    "should": "~1.3.0",
    "grunt-mocha-cli": "~1.2.1"
  },
  "readme": "# simplematrix\npretty simple matrix math library.\n## How to use\n```\nnpm install simplematrix\n```\n\n```js\nvar m = require('simplematrix');\n// solve AX = B\nvar a = new m.Matrix([[1,2],[3,4]]);\nvar b = new m.Matrix([[1,1],[1,0]]);\nvar x = b.dividedBy(a);\nx // Watch out for floating point error\n/*\n{ '0': [ -1, -1.9999999999999996 ],\n  '1': [ 1, 1.4999999999999998 ] }\n*/\nx.rounded() // You can round it if you want (casts to precision 12)\n/*\n{ '0': [ -1, -2 ],\n  '1': [ 1, 1.5 ] }\n*/\nx.equals(x.rounded()) // But the equals() operator automatically compensates for floating point error\n/*\ntrue\n*/\n```\n## Constructors\n```js\nvar a = new m.Matrix([[1,2],[3,4]]);\nvar i2 = new m.Identity(2);\n```\n\n## Functions on each Matrix\n### times\nReturns the result of multiplying a matrix by a constant or another (correctly-dimensioned) matrix.\n```js\nvar c = a.times(b);\n```\n### plus\n```js\nvar c = a.plus(b);\n```\n### equals\nTests for equality. Handles floating point error nicely.\n```js\nif (a.equals(b))\n```\n### dividedBy\nSolves the system of linear equations AX=B via the Gauss-Jordan method with partial pivoting.\n```js\nvar x = b.dividedBy(a);\n```\n### inverse\nReturns the inverse of a matrix (by letting B equal the identity matrix in  `a.solve(b)`).  The inverse is cached, so if you call `.inverse()` a second time, the only work done will be to see if the matrix has changed since the last inverse computation.\n```js\nvar a_inv = a.inverse();\n```\n### transpose\nReturns the transpose of a matrix.  Not cached.\n```js\nvar a_T = a.transpose();\n```\n### copy\nCopies a matrix\n```js\nvar a2 = a.copy();\n```\n### rounded\nTakes care of floating point error using `parseFloat(f.toFixed(12))` on each element f of the matrix\n```js\nvar niceMatrix = x.rounded();\n```\n\n## Properties on each Matrix\n### rows\n```js\nvar m = a.rows;\n```\n### columns\n```js\nvar n = a.columns;\n```",
  "readmeFilename": "README.md",
  "_id": "simplematrix@0.2.1",
  "_from": "simplematrix@x"
}
